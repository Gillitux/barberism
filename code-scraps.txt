=============tried to use functional component for barberslistpage ======

// import React, { useEffect, useContext } from 'react';
// import BarberListContext from '../contexts/BarberListContext';
// import BarberApiService from '../services/barber-api-service';
// import { Section } from '../components/Utils/Utils';
// import BarberListItem from '../components/BarberListItem/BarberListItem';
// import './BarberListPage.css';
// export default function BarberListPage(props) {
//   // static contextType = BarberListContext;
//   const BarbersContext = useContext(BarberListContext);

//   useEffect(() => {
//     BarberApiService.getBarbers()
//       .then(res => BarbersContext.setBarberList(res))
//       .catch(BarbersContext.setError);
//   });

//   useEffect(() => {
//     const { barberList = [] } = BarbersContext.barberList;
//     return barberList.map(barber => (
//       <BarberListItem key={barber.id} barber={barber} />
//     ));
//   });

//   // useEffect(() => {
//   //   BarbersContext.setError('error');
//   // });

//   return (
//     <Section list className="BarberListPage">
//       {BarbersContext.error ? (
//         <p className="red">There was an error, try again</p>
//       ) : (
//         BarbersContext.barberList
//       )}
//     </Section>
//   );
// }




=========barberListItem=========
// handleClickDelete = evt => {
  //   const barberId = evt.target.getAttribute('key');
  //   console.log('barber id is', barberId);

  //   BarberApiService.deleteBarber(barberId)
  //     .then(res => this.context.clearBarber(res))
  //     .catch(this.context.setError);
  // }; // BarberApiService.deleteBarber(evt.currentTarget)


  //key={barber.id} barber={barber} />

    // name: '',
    // location: '',
    // services: '',
    // phone_number: '',
    // email: '',




    ========FROM SEARCH OPTIONS=======
    <div className="search__by__state search__items">
          <label htmlFor="search__by__state">Search by State</label>

            <select
              name="state"
              id="search__by__state"
              className="state__dropdown"
              form="search__bar"
            >
              <option value="">Select State</option>
              <option value="Alabama">Alabama</option>
              <option value="Alaska">Alaska</option>
              <option value="Arizona">Arizona</option>
              <option value="Arkansas">Arkansas</option>
              <option value="California">California</option>
              <option value="Colorado">Colorado</option>
              <option value="Connecticut">Connecticut</option>
              <option value="Delaware">Delaware</option>
              <option value="District Of Columbia">District Of Columbia</option>
              <option value="Florida">Florida</option>
              <option value="Georgia">Georgia</option>
              <option value="Hawaii">Hawaii</option>
              <option value="Idaho">Idaho</option>
              <option value="Illinois">Illinois</option>
              <option value="Indiana">Indiana</option>
              <option value="Iowa">Iowa</option>
              <option value="Kansas">Kansas</option>
              <option value="Kentucky">Kentucky</option>
              <option value="Louisiana">Louisiana</option>
              <option value="Maine">Maine</option>
              <option value="Maryland">Maryland</option>
              <option value="Massachusetts">Massachusetts</option>
              <option value="Michigan">Michigan</option>
              <option value="Minnesota">Minnesota</option>
              <option value="Mississippi">Mississippi</option>
              <option value="Missouri">Missouri</option>
              <option value="Montana">Montana</option>
              <option value="Nebraska">Nebraska</option>
              <option value="Nevada">Nevada</option>
              <option value="New Hampshire">New Hampshire</option>
              <option value="New Jersey">New Jersey</option>
              <option value="New Mexico">New Mexico</option>
              <option value="New York">New York</option>
              <option value="North Carolina">North Carolina</option>
              <option value="North Dakota">North Dakota</option>
              <option value="Ohio">Ohio</option>
              <option value="Oklahoma">Oklahoma</option>
              <option value="Oregon">Oregon</option>
              <option value="Pennsylvania">Pennsylvania</option>
              <option value="Rhode Island">Rhode Island</option>
              <option value="South Carolina">South Carolina</option>
              <option value="South Dakota">South Dakota</option>
              <option value="Tennessee">Tennessee</option>
              <option value="Texas">Texas</option>
              <option value="Utah">Utah</option>
              <option value="Vermont">Vermont</option>
              <option value="Virginia">Virginia</option>
              <option value="Washington">Washington</option>
              <option value="West Virginia">West Virginia</option>
              <option value="Wisconsin">Wisconsin</option>
              <option value="Wyoming">Wyoming</option>
            </select>
          </div>




=======================ATTEMPT AT FUNCTIONAL COMPONENT W HOOKS IN BARBERLIST CONTEXT ==========
// import React, { useState } from 'react';

// const BarberListContext = React.createContext({
//   barberList: [],
//   error: null,
//   setError: () => {},
//   clearError: () => {},
//   setBarberList: () => {},
// });
// export default BarberListContext;

// export function BarberListProvider({ children }) {
//   const [barberList, setBarberList] = useState([]);
//   const [error, setError] = useState(null);

//   const set_barber_list = barber => {
//     setBarberList(barber);
//   };

//   const set_error = () => {
//     console.error(error);
//     setError(error);
//   };

//   const clear_error = () => {
//     setError(null);
//   };

//   const value = {
//     barberList: barberList,
//     error: set_error,
//     setError: set_error,
//     clearError: clear_error,
//     setBarberList: set_barber_list,
//   };
//   console.log(value);

//   return (
//     <BarberListContext.Provider value={value}>
//       {children}
//     </BarberListContext.Provider>
//   );
// }




// handleEditBarber = evt => {
//   const { setBarber } = this.context;
//   const { barber } = this.context;
//   evt.preventDefault();
//   const barberToEdit = JSON.stringify({
//     barber_name: this.context.barber.barber_name,
//     barber_location: this.context.barber.barber_location,
//     services: this.context.barber.services,
//     phone_number: this.context.barber.phone_number,
//     email: this.context.barber.email,
//   });

//   let param = this.props.match.params.barber_id;
//   BarberApiService.patchBarber(
//     evt.target.barber_name.value,
//     evt.target.barber_location.value,
//     services,
//     evt.target.phone_number.value,
//     evt.target.email.value
//   )
//     .then(res => this.context.setBarber(res))
//     .catch(this.context.setError);
// };








===============From BarberListPage=============
// constructor(props) {
  //   super(props);
  //   this.state = {
  //     barberList: [],
  //   };
  // }

  // componentDidMount() {
  // const state = this.context.clearError();
  // BarberApiService.getBarberByState()
  //   .then(res => this.context.setBarberList(res))
  //   .catch(this.context.setError);
  // }



  =======BarberApiService =========
  // getBarbers(barberId) {
//   return fetch(`${config.API_ENDPOINT}/barbers/${barberId}`, {
//     headers: {
//       'Content-Type': 'application/json',
//       authorization: config.API_KEY,
//     },
//   }).then((res) =>
//     !res.ok ? res.json().then((e) => Promise.reject(e)) : res.json()
//   );
// },
// postNewBarber(name, location, website_url, description, phone, email) {
//   return fetch(`${config.API_ENDPOINT}/barbers`, {
//     method: 'POST',
//     headers: {
//       'content-type': 'application/json',
//     },
//     body: JSON.stringify({
// name,
// location,
// website_url,
// description,
// phone,
// email,
//     }),
//   }).then((res) =>
//     !res.ok ? res.json().then((e) => Promise.reject(e)) : res.json()
//   );
// },
// };




======EDIT BARBER PAGE =====
{/* <div className="editField">
          <label htmlFor="services">Select Services</label>
          <ul className="service__selection" id="service__selection">
            <li className="service__option">
              <input
                type="checkbox"
                // ref={this.myRefs.sensory}
                id="sensory"
                name="sensory"
                checked={this.state.sensory}
                value="1"
                className="select__field"
                onChange={evt => this.handleCheckboxChange(evt)}
              />
              <label htmlFor="sensory_hours" className="Service__label">
                Sensory Hours
              </label>
            </li>
            <li className="service__option">
              <input
                type="checkbox"
                // ref={this.myRefs.scissor}
                id="scissors"
                name="scissors"
                checked={this.state.scissors}
                value="2"
                className="select__field"
                onChange={evt => this.handleCheckboxChange(evt)}
              />
              <label htmlFor="sensory_hours" className="Service__label">
                Scissor cuts
              </label>
            </li>
            <li className="service__option">
              <input
                type="checkbox"
                // ref={this.myRefs.longer_appointments}
                id="longer_appointments"
                name="longer_appointments"
                checked={this.state.longer_appointments}
                value="3"
                className="select__field"
                onChange={evt => this.handleCheckboxChange(evt)}
              />
              <label htmlFor="longer_appointments" className="Service__label">
                Longer Appointments
              </label>
            </li>
            <li className="service__option">
              <input
                type="checkbox"
                // ref={this.myRefs.home_haircuts}
                id="home_haircuts"
                name="home_haircuts"
                checked={this.state.home_haircuts}
                value="4"
                className="select__field"
                onChange={evt => this.handleCheckboxChange(evt)}
              />
              <label htmlFor="home_haircuts" className="Service__label">
                Home Haircuts
              </label>
            </li>
          </ul>
        </div> */}